'use strict';

var transformDimension = require('../transformDimension.cjs');
var transformFontWeights = require('../transformFontWeights.cjs');
var checkAndEvaluateMath = require('../checkAndEvaluateMath.cjs');
var isNothing = require('../utils/is-nothing.cjs');

function hasWhiteSpace(value) {
    const whiteSpaceRegex = new RegExp('\\s+');
    return whiteSpaceRegex.test(value);
}
function isAlreadyQuoted(value) {
    return value.startsWith("'") && value.endsWith("'");
}
function isCommaSeparated(value) {
    return value.includes(',');
}
function escapeApostrophes(value) {
    return value.replace(/'/g, "\\'");
}
function quoteWrapWhitespacedFont(fontString) {
    let fontName = fontString.trim();
    const isQuoted = isAlreadyQuoted(fontName);
    if (!isQuoted) {
        fontName = escapeApostrophes(fontName);
    }
    return hasWhiteSpace(fontName) && !isQuoted ? `'${fontName}'` : fontName;
}
function processFontFamily(fontFamily) {
    if (isNothing.isNothing(fontFamily)) {
        return 'sans-serif';
    }
    if (isCommaSeparated(fontFamily)) {
        let fontFamilyArray = [];
        fontFamilyArray = fontFamily.split(',').map(part => part.trim());
        return fontFamilyArray.map((part) => quoteWrapWhitespacedFont(part)).join(', ');
    }
    return quoteWrapWhitespacedFont(fontFamily);
}
/**
 * Helper: Transforms typography object to typography shorthand for CSS
 * This currently works fine if every value uses an alias, but if any one of these use a raw value, it will not be transformed.
 * If you'd like to output all typography values, you'd rather need to return the typography properties itself
 */
function transformTypographyForCSS(value) {
    if (typeof value !== 'object') {
        return value;
    }
    let { fontFamily, fontWeight, fontSize, lineHeight } = value;
    const { fontStyle } = value;
    fontSize = transformDimension.transformDimension(checkAndEvaluateMath.checkAndEvaluateMath(fontSize));
    lineHeight = checkAndEvaluateMath.checkAndEvaluateMath(lineHeight);
    fontWeight = transformFontWeights.transformFontWeights(fontWeight);
    fontFamily = processFontFamily(fontFamily);
    return `${isNothing.isNothing(fontWeight) ? 400 : fontWeight}${isNothing.isNothing(fontStyle) ? '' : ` ${fontStyle}`} ${isNothing.isNothing(fontSize) ? '16px' : fontSize}/${isNothing.isNothing(lineHeight) ? 1 : lineHeight} ${fontFamily}`;
}

exports.escapeApostrophes = escapeApostrophes;
exports.hasWhiteSpace = hasWhiteSpace;
exports.isAlreadyQuoted = isAlreadyQuoted;
exports.isCommaSeparated = isCommaSeparated;
exports.processFontFamily = processFontFamily;
exports.transformTypographyForCSS = transformTypographyForCSS;
